generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mongodb"
	url      = env("DATABASE_URL")
}

model Account {
	id                String  @id @default(auto()) @map("_id") @db.ObjectId
	userId            String  @db.ObjectId
	type              String
	provider          String
	providerAccountId String
	refresh_token     String? @db.String
	access_token      String? @db.String
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String? @db.String
	session_state     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(auto()) @map("_id") @db.ObjectId
	sessionToken String   @unique
	userId       String   @db.ObjectId
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
	id        String    @id @default(auto()) @map("_id") @db.ObjectId
	email     String?   @unique
	name      String?
	image     String?
	role      Role      @default(EXTERNAL)
	profile   Profile?
	createdAt DateTime? @default(now())
	accounts  Account[]
	sessions  Session[]
	username  String?
	password  String    @db.String
}

//1-1 relation User-Profile
model Profile {
	id     String  @id @default(auto()) @map("_id") @db.ObjectId
	bio    String?
	name   String?
	user   User?   @relation(fields: [userId], references: [id])
	userId String? @unique @db.ObjectId
}

// nombre de la empresa, , NIT,  (con sus
// respectivas validaciones). Las empresas se pueden modificar y
// eliminar.
model Company {
	nit       String    @id @map("_id") @db.String
	name      String?
	address   String?
	phone     String?
	createdAt DateTime? @default(now())
	updatedAt DateTime? @updatedAt
	inventory  Inventory?
}

model Inventory {
	id        String   @id @default(auto()) @map("_id") @db.ObjectId
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	company  Company?  @relation(fields: [companyId], references: [nit])
	companyId String?  @db.String @unique

	product Product[]


}

model Product {
	id          String    @id @default(auto()) @map("_id") @db.ObjectId
	name        String?
	description String?
	price       Float?
	quantity    Int?
	createdAt   DateTime? @default(now())
	updatedAt   DateTime? @updatedAt

	inventory  Inventory? @relation(fields: [inventoryId], references: [id])
	inventoryId String?  @db.ObjectId
}

enum Role {
	ADMIN
	EXTERNAL
}


